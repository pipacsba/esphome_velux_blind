substitutions:
  name: m5stack-atom-echo-b833f8
  friendly_name: ATomka

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.6.0
  name_add_mac_suffix: false
  project:
    name: m5stack.atom-echo-voice-assistant
    version: "24.7.24"

esp32:
  board: m5stack-atom
  cpu_frequency: 240MHz
  framework:
    type: esp-idf

logger:
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

ota:
  - platform: esphome
    id: ota_esphome

# https://github.com/esphome/wake-word-voice-assistants/blob/main/m5stack-atom-echo/m5stack-atom-echo.yaml
wifi:
  #use_address: 192.168.17.182
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
    manual_ip:
      static_ip: xx.xx.xx.xx
      gateway: xx.xx.xx.xx
      subnet: xx.xx.xx.xx
      dns1: xx.xx.xx.xx
  - ssid: !secret wifi_ssid_backup
    password: !secret wifi_password
    manual_ip:
      static_ip: xx.xx.xx.xx
      gateway: xx.xx.xx.xx
      subnet: xx.xx.xx.xx
      dns1: xx.xx.xx.xx
  ap:
    ssid: "ATomka_Fallback"
    password: !secret wifi_password
  domain: .lan

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33
    i2s_bclk_pin: GPIO19

microphone:
  - platform: i2s_audio
    id: echo_microphone
    i2s_din_pin: GPIO23
    adc_type: external
    pdm: true
    sample_rate: 16000
    correct_dc_offset: true

speaker:
  - platform: i2s_audio
    id: echo_speaker
    i2s_dout_pin: GPIO22
    dac_type: external
    bits_per_sample: 16bit
    sample_rate: 16000
    channel: stereo  # The Echo has poor playback audio quality when using mon audio
    buffer_duration: 60ms

media_player:
  - platform: speaker
    name: None
    id: echo_media_player
    announcement_pipeline:
      speaker: echo_speaker
      format: WAV
    codec_support_enabled: false
    buffer_size: 6000
    volume_min: 0.4
    files:
      - id: timer_finished_wave_file
        file: https://github.com/esphome/wake-word-voice-assistants/raw/main/sounds/timer_finished.wav
    on_announcement:
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
      - light.turn_on:
          id: led
          blue: 100%
          red: 0%
          green: 0%
          brightness: 100%
          effect: none
    on_idle:
      - script.execute: start_wake_word
      - script.execute: reset_led

voice_assistant:
  id: va
  #  micro_wake_word:
  microphone:
    microphone: echo_microphone
    channels: 0
    gain_factor: 4
  media_player: echo_media_player
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Slow Pulse"
  on_stt_vad_end:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Fast Pulse"
  on_tts_start:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 100%
        effect: none
  on_end:
    # Handle the "nevermind" case where there is no announcement
    - delay: 100ms
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    # Restart only mWW if enabled; streaming wake words automatically restart
    # ami nem igaz
    - script.execute: reset_led
  on_error:
    - light.turn_on:
        id: led
        red: 100%
        green: 0%
        blue: 0%
        brightness: 100%
        effect: none
    - delay: 2s
    - script.execute: reset_led
  on_client_connected:
    - delay: 2s  # Give the api server time to settle
    - script.execute: start_wake_word
  on_client_disconnected:
    - script.execute: stop_wake_word
  on_timer_finished:
    - script.execute: stop_wake_word
    - wait_until:
        not:
          microphone.is_capturing:
    - switch.turn_on: timer_ringing
    - light.turn_on:
        id: led
        red: 0%
        green: 100%
        blue: 0%
        brightness: 100%
        effect: "Fast Pulse"
    - wait_until:
        - switch.is_off: timer_ringing
    - light.turn_off: led
    - switch.turn_off: timer_ringing

binary_sensor:
  # button does the following:
  # short click - stop a timer
  # if no timer then restart either microwakeword or voice assistant continuous
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: Button
    disabled_by_default: true
    entity_category: diagnostic
    id: echo_button
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - script.execute: start_wake_word
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

#binary_sensor for VELUX
  - platform: gpio
    name: "blind_down_sens"
    id: blind_down_sens
    use_interrupt: false
    pin:
      id: in_pin_down
      number: GPIO25
      allow_other_uses: true
      #mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on_off: 50ms
    on_press:
      then:
        - cover.close: velux_blind

  - platform: gpio
    name: "blind_up_sens"
    id: blind_up_sens
    use_interrupt: false
    pin:
      id: in_pin_up
      number: GPIO21
      allow_other_uses: true
      #mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on_off: 50ms
    on_press:
      then:
        - cover.open: velux_blind

  - platform: gpio
    name: "blind_stop_sens"
    id: blind_stop_sens
    use_interrupt: false
    pin:
      id: in_pin_stop
      number: GPIO32
      allow_other_uses: true
      #mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on_off: 50ms
    on_press:
      then:
        - cover.stop: velux_blind

light:
  - platform: esp32_rmt_led_strip
    id: led
    name: None
    disabled_by_default: true
    entity_category: config
    pin: GPIO27
    default_transition_length: 0s
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

script:
  - id: reset_led
    then:
      - if:
          condition:
            #- switch.is_on: use_wake_word
            - switch.is_on: use_listen_light
          then:
            - light.turn_on:
                id: led
                red: 100%
                green: 89%
                blue: 71%
                brightness: 60%
                effect: none
          else:
            - light.turn_off: led
  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  - id: stop_wake_word
    then:
      - lambda: id(va).set_use_wake_word(false);
      - voice_assistant.stop:

switch:
  - platform: template
    name: Use listen light
    id: use_listen_light
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - script.execute: reset_led
    on_turn_off:
      - script.execute: reset_led
  - platform: template
    id: timer_ringing
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
              id(echo_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(echo_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
    on_turn_on:
      # Turn on the repeat mode and pause for 1000 ms between playlist items/repeats
      - lambda: |-
            id(echo_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(echo_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_wave_file
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing
  - platform: restart
    name: "Restart"


sensor:
  - platform: wifi_signal
    name: "ATomka RSSI"
    id: livingroom_clock_rssi_db
    update_interval: 60s
    force_update: True
  - platform: uptime
    name: ATomka Uptime Sensor

text_sensor:
  - platform: wifi_info
    ssid:
      name: ATomka Connected SSID

rtttl:
  speaker: echo_speaker


output:
- platform: gpio
  #name: "blind_down_ctrl"
  id: blind_down_ctrl
  pin:
    id: out_pin_down
    number: GPIO25
    allow_other_uses: true
    inverted: true

- platform: gpio
  #name: "blind_up_ctrl"
  id: blind_up_ctrl
  pin:
    id: out_pin_up
    number: GPIO21
    allow_other_uses: true
    inverted: true

- platform: gpio
  #name: "blind_stop_ctrl"
  id: blind_stop_ctrl
  pin:
    id: out_pin_stop
    number: GPIO32
    allow_other_uses: true
    inverted: true


button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset

#buttons for VELUX
  - platform: template
    name: "Blind Down"
    id: blind_down
    icon: "mdi:window-shutter"
    internal: True
    on_press:
      - logger.log: Button down Pressed
      - lambda: |-
          id(out_pin_down)->pin_mode(gpio::FLAG_OUTPUT);
          id(blind_down_ctrl)->setup();
      - output.turn_on: blind_down_ctrl
      - delay: 500ms
      - output.turn_off: blind_down_ctrl
      - delay: 10ms
      - lambda: |-
          id(in_pin_down)->pin_mode(gpio::FLAG_INPUT);
          id(blind_down_sens)->setup();
      
  - platform: template
    name: "Blind Up"
    id: blind_up
    icon: "mdi:window-shutter"
    internal: True
    on_press:
      - logger.log: Button up Pressed
      - lambda: |-
          id(out_pin_up)->pin_mode(gpio::FLAG_OUTPUT);
          id(blind_up_ctrl)->setup();
      - output.turn_on: blind_up_ctrl
      - delay: 500ms
      - output.turn_off: blind_up_ctrl
      - delay: 10ms
      - lambda: |-
          id(in_pin_up)->pin_mode(gpio::FLAG_INPUT);
          id(blind_up_sens)->setup();
      
  - platform: template
    name: "Blind Stop"
    id: blind_stop
    icon: "mdi:window-shutter"
    internal: True
    on_press:
      - logger.log: Button stop Pressed
      - lambda: |-
          id(out_pin_stop)->pin_mode(gpio::FLAG_OUTPUT);
          id(blind_stop_ctrl)->setup();
      - output.turn_on: blind_stop_ctrl
      - delay: 500ms
      - output.turn_off: blind_stop_ctrl
      - delay: 10ms
      - lambda: |-
          id(in_pin_stop)->pin_mode(gpio::FLAG_INPUT);
          id(blind_stop_sens)->setup();


cover:
  - platform: template
    name: "Velux"
    id: "velux_blind"
    open_action:
      - button.press: blind_up
    close_action:
      - button.press: blind_down
    stop_action:
      - button.press: blind_stop
    optimistic: true
    assumed_state: true
    device_class: blind
